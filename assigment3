def menu() :#O(1)

  
  name =input("Please enter your name :  ")
  print("Welcome back", name)
  while True:
     print("---------------\n 1. Add Matrices  \n 2. Check Rotation \n 3. Invert Dictionary  \n 4. Convert Matrix to Dictionary \n 5. Check Palindrome \n 6. Search for an Element & Merge Sort \n 7. Exit \n ---------------")
     option=int(input("what is your choice : "))
  
     if option == 1:
        AddMatrices()
     elif option == 2:
        Checkrotation()
     elif option == 3:
        InvertDictionary()
     elif option == 4:
        Matrixtodic()
     elif option == 5:
       print(is_palindrome(input("Enter a word to check if it is palindrome : ")))
     elif option == 6:
        Search_Sort()
     elif option == 7:
         break
     else :
        return "please choose a number from 1 to 7"   
def AddMatrices():#O(n^2)
  rows=int(input("enter the number of rows : " )) 
  coulmn=int(input("enter the number of coulmn : "))
  matrix1=[]
  matrix2=[]
  result = []
  for i in range(rows):#O(n^2)
      row=[]
      for j in range(coulmn):
         elements= int(input("enter the elements of the first matrix : "))
         row.append(elements)
      matrix1.append(row)   
  for i in range(rows):#O(n^2)
      row=[]
      for j in range(coulmn):
         elements= int(input("enter the elements of the Second matrix : "))
         row.append(elements)
      matrix2.append(row)  

  for i in range(rows):#O(n^2)
    row = []  
    for j in range(coulmn):
        row.append(matrix1[i][j] + matrix2[i][j])
    result.append(row)


  for row in result:
     print(row)
def Checkrotation():#O(n^2)
  matrix1=[]
  matrix2=[]
  rows=int(input("Enter the number of rows for the fist matrix:  "))
  coulmns=int(input("Enter the number of coulmns for the first matrix :  "))
  for i in range(rows):
    row=[]
    for j in range(coulmns):
       row.append(int(input("Enter the element of the first matrix :   ")))
    matrix1.append(row)
  rows1=int(input("Enter the number of rows for the fist matrix:  "))
  coulmns1=int(input("Enter the number of coulmns for the first matrix :  "))
  for i in range(rows1):
    row=[]
    for j in range(coulmns1):
       row.append(int(input("Enter the element of the second matrix :   ")))
    matrix2.append(row)
  if rows != coulmns1 or rows1 !=coulmns :
     print("Not Rotation")
  else :
    for i in range(rows):
       for j in range(coulmns1):
          if matrix1[i][j] == matrix2[i][j]:
             print("Matrix 2 rotation of matrix 1 ")
             break
          else :
              print("Matrix 2 is not rotation of matrix 1 ")
              break
def InvertDictionary():#O(n)
  dic={}
  while True:
    key=input("enter the key (or -1 to when you finsh)   ")
    if key == '-1' :
        break
    value =input("enter the value :  ")
    dic[key]=value
  print("The original dictionry :\n" ,dic)
  dic1={value:key for key,value in dic.items()}
  print("The inverted dictionry \n:",dic1)
def Matrixtodic():#O(n)
  rows=int(input("how many users u want to add : "))
  counter=1
  dic={}
  matrix=[]
  for i in range(rows):
      row=[]
      FN=input('First name :  ')
      lN=input('last name :  ' )
      ID=f"ID{counter}"
      JT=input(" Job :  ")
      CN=input("Company name :  ")
      counter+=1
      print('------------------')
      
      row=[FN,lN,ID,JT,CN]
      matrix.append(row)
  print("the matrix :",matrix)
  for i  in range(len(matrix)):
      dic[matrix[i][2]]=matrix[i]
  print("The inverted matrix to dic : ",dic)
def is_palindrome(s):#O(n)
  if len(s) <= 1:
      return True
  elif s[0] == s[-1]:
      return is_palindrome(s[1:-1])
  else: 
      return False
def Search_Sort():#O(nlogn)
  list = []
  while True :
    elements=int(input("enter the elment of the list (or -1 to finsh) :  "))
    if elements == -1: 
       break
    else:
       list.append(elements)
  print('your list is :\n', list,"\n Oops its need to be sorted 1 second")
  print("-----------------------")
  print('your list after sorting is :\n', MergeS(list))#O(nlogn)
  print("-----------------------")
  element=int(input('enter the element you want to search for :  '))
  print("your element whose you secrching for in  index : " ,BSearch(list,element))#O(log n)
def MergeS(list):#O(nlogn)
  if len(list)>1:
    mid=len(list)//2
    left=list[:mid]
    right=list[mid:]
    MergeS(left)
    MergeS(right)
    i=k=j=0
    while i<len(left) and j<len(right):
      if left[i]<right[j]:
        list[k]=left[i]
        i+=1
        k+=1
      else :
        list[k]=right[j]
        j+=1
        k+=1
    while i<len(left):
      list[k]=left[i]
      i+=1
      k+=1
    while j<len(right):
      list[k]=right[j]
      j+=1
      k+=1
  return list
def BSearch(list,element):#O(log n)
  low=0
  high=len(list)-1
  
  while low <=high:
    mid=(low+high)//2
    if element == list[mid]:
      return mid
      break
    elif element < list[mid]:
      high=mid
    else:
      low=mid+1
menu()#run the program 